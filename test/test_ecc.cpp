/*
 *   Elliptic Curve Digital Signature Algorithm (ECDSA)
 *
 *
 *   This program verifies the signature given to a <file> in
 *   <file>.ecs generated by program ecsign
 *
 *   The curve is y^2=x^3+Ax+B mod p
 *
 *   The file common.ecs is presumed to exist, and to contain the domain
 *   information {p,A,B,q,x,y}, where A and B are curve parameters, (x,y) are
 *   a point of order q, p is the prime modulus, and q is the order of the
 *   point (x,y). In fact normally q is the prime number of points counted
 *   on the curve.
 *
 *   Requires: big.cpp ecn.cpp
 *
 */

#include <cstring>
#include <fstream>
#include <iostream>
#include <string>
#include <utility>
#include "kgc.h"
#include "process.h"
#include <cassert>


extern miracl* mip;


void strip(char* name) { /* strip off filename extension */
    int i;
    for (i = 0; name[i] != '\0'; i++) {
        if (name[i] != '.') continue;
        name[i] = '\0';
        break;
    }
}



int main() {
    mip->IOBASE = 16;
    extern const char* ec_filename;
    
    // 1. Initialize KGC
    KGC* kgc_ptr = new KGC(ec_filename);
    kgc_ptr->print_params();

    // 2. Generate partial key
    std::string pid_val = "5158ee15ec9beeae6cfcb3c5728e4313";
    std::pair<Big, ECn> partial_key = kgc_ptr->generate_partial_key(pid_val);

    // 3. Initialize Process
    Process* process_ptr = new Process(pid_val, kgc_ptr->Ppub);
    process_ptr->print_params();

   

    // // 4. Generate full key
    process_ptr->generate_full_key(partial_key);
    std::cout << "X: " << point2str(process_ptr->public_key.first) << std::endl;
    std::cout << "R: " << point2str(process_ptr->public_key.second) << std::endl;


    return 0;
}
