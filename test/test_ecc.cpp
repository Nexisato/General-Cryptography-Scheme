/*
 *   Elliptic Curve Digital Signature Algorithm (ECDSA)
 *
 *
 *   This program verifies the signature given to a <file> in
 *   <file>.ecs generated by program ecsign
 *
 *   The curve is y^2=x^3+Ax+B mod p
 *
 *   The file common.ecs is presumed to exist, and to contain the domain
 *   information {p,A,B,q,x,y}, where A and B are curve parameters, (x,y) are
 *   a point of order q, p is the prime modulus, and q is the order of the
 *   point (x,y). In fact normally q is the prime number of points counted
 *   on the curve.
 *
 *   Requires: big.cpp ecn.cpp
 *
 */

#include <cstring>
#include <fstream>
#include <iostream>
#include <string>
#include <utility>
#include "kgc.h"


extern miracl* mip;


void strip(char* name) { /* strip off filename extension */
    int i;
    for (i = 0; name[i] != '\0'; i++) {
        if (name[i] != '.') continue;
        name[i] = '\0';
        break;
    }
}



int main() {
    mip->IOBASE = 16;
    const char* filename = "../secp160.ecs";
    KGC* kgc_ptr = new KGC(filename);
    kgc_ptr->print_params();

    std::string pid_val = "123456";
    std::pair<std::string, std::string> partial_key = kgc_ptr->generate_partial_key(pid_val);
    std::cout << "d: " << partial_key.first << std::endl;
    std::cout << "R: " << partial_key.second << std::endl;

    // std::cout << "Ppub: " << kgc_ptr->Ppub << std::endl;
    // std::string p2str = point2str(kgc_ptr->Ppub);

    // std::cout << "Ppub-2-str: " << p2str << std::endl;
    
    // ECn Ppub_recover = str2point(p2str);
    // std::cout << "Ppub-recover: " << Ppub_recover << std::endl;


    return 0;
}
